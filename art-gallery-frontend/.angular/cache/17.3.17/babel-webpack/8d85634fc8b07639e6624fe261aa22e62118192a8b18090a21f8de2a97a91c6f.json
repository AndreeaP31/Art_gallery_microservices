{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { finalize, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/artist.service\";\nimport * as i3 from \"../services/artwork.service\";\nimport * as i4 from \"../services/auth.service\";\nexport class ArtistDetailsViewModel {\n  constructor(route, artistService, artworkService, authService) {\n    this.route = route;\n    this.artistService = artistService;\n    this.artworkService = artworkService;\n    this.authService = authService;\n    this.artistSubject = new BehaviorSubject(null);\n    this.artist$ = this.artistSubject.asObservable();\n    this.artworksSubject = new BehaviorSubject([]);\n    this.artworks$ = this.artworksSubject.asObservable();\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loading$ = this.loadingSubject.asObservable();\n    this.errorSubject = new BehaviorSubject(null);\n    this.error$ = this.errorSubject.asObservable();\n    // Check if user can edit artist (employee, manager, admin)\n    this.canEdit$ = this.authService.isAuthenticated$.pipe(switchMap(isAuthenticated => {\n      if (!isAuthenticated) return new BehaviorSubject(false);\n      return new BehaviorSubject(this.authService.isEmployee());\n    }));\n  }\n  loadArtist(id) {\n    this.loadingSubject.next(true);\n    this.errorSubject.next(null);\n    // Load artist details\n    this.artistService.getArtistById(id).pipe(finalize(() => this.loadingSubject.next(false))).subscribe(artist => {\n      this.artistSubject.next(artist);\n      this.loadArtistArtworks(id);\n    }, error => this.errorSubject.next('Failed to load artist details. Please try again later.'));\n  }\n  loadArtistArtworks(artistId) {\n    this.loadingSubject.next(true);\n    this.artworkService.getArtworksByArtist(artistId).pipe(finalize(() => this.loadingSubject.next(false))).subscribe(artworks => this.artworksSubject.next(artworks), error => this.errorSubject.next('Failed to load artist artworks. Please try again later.'));\n  }\n  static {\n    this.ɵfac = function ArtistDetailsViewModel_Factory(t) {\n      return new (t || ArtistDetailsViewModel)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i2.ArtistService), i0.ɵɵinject(i3.ArtworkService), i0.ɵɵinject(i4.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ArtistDetailsViewModel,\n      factory: ArtistDetailsViewModel.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","finalize","switchMap","ArtistDetailsViewModel","constructor","route","artistService","artworkService","authService","artistSubject","artist$","asObservable","artworksSubject","artworks$","loadingSubject","loading$","errorSubject","error$","canEdit$","isAuthenticated$","pipe","isAuthenticated","isEmployee","loadArtist","id","next","getArtistById","subscribe","artist","loadArtistArtworks","error","artistId","getArtworksByArtist","artworks","i0","ɵɵinject","i1","ActivatedRoute","i2","ArtistService","i3","ArtworkService","i4","AuthService","factory","ɵfac"],"sources":["C:\\fac\\an3_sem2\\ps\\proiect_ps - Copy (2)\\art-gallery-frontend\\src\\app\\view-models\\artist-details.view-model.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, combineLatest } from 'rxjs';\r\nimport { finalize, switchMap } from 'rxjs/operators';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ArtistService } from '../services/artist.service';\r\nimport { ArtworkService } from '../services/artwork.service';\r\nimport { Artist } from '../models/artist.model';\r\nimport { ArtworkListItem } from '../models/artwork.model';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class ArtistDetailsViewModel {\r\n  private artistSubject = new BehaviorSubject<Artist | null>(null);\r\n  public artist$ = this.artistSubject.asObservable();\r\n  \r\n  private artworksSubject = new BehaviorSubject<ArtworkListItem[]>([]);\r\n  public artworks$ = this.artworksSubject.asObservable();\r\n  \r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  public loading$ = this.loadingSubject.asObservable();\r\n  \r\n  private errorSubject = new BehaviorSubject<string | null>(null);\r\n  public error$ = this.errorSubject.asObservable();\r\n  \r\n  // Computed observables\r\n  public canEdit$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private artistService: ArtistService,\r\n    private artworkService: ArtworkService,\r\n    private authService: AuthService\r\n  ) {\r\n    // Check if user can edit artist (employee, manager, admin)\r\n    this.canEdit$ = this.authService.isAuthenticated$\r\n      .pipe(\r\n        switchMap(isAuthenticated => {\r\n          if (!isAuthenticated) return new BehaviorSubject<boolean>(false);\r\n          return new BehaviorSubject<boolean>(this.authService.isEmployee());\r\n        })\r\n      );\r\n  }\r\n\r\n  loadArtist(id: number): void {\r\n    this.loadingSubject.next(true);\r\n    this.errorSubject.next(null);\r\n    \r\n    // Load artist details\r\n    this.artistService.getArtistById(id)\r\n      .pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      )\r\n      .subscribe(\r\n        artist => {\r\n          this.artistSubject.next(artist);\r\n          this.loadArtistArtworks(id);\r\n        },\r\n        error => this.errorSubject.next('Failed to load artist details. Please try again later.')\r\n      );\r\n  }\r\n\r\n  private loadArtistArtworks(artistId: number): void {\r\n    this.loadingSubject.next(true);\r\n    \r\n    this.artworkService.getArtworksByArtist(artistId)\r\n      .pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      )\r\n      .subscribe(\r\n        artworks => this.artworksSubject.next(artworks),\r\n        error => this.errorSubject.next('Failed to load artist artworks. Please try again later.')\r\n      );\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}