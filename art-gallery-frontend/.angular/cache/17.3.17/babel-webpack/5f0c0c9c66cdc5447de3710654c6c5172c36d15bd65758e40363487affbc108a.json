{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/http/http-client.service\";\nexport class HomeViewModel {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.featuredArtworksSubject = new BehaviorSubject([]);\n    this.featuredArtistsSubject = new BehaviorSubject([]);\n    this.loadingSubject = new BehaviorSubject(false);\n    this.errorSubject = new BehaviorSubject(null);\n    this.featuredArtworks$ = this.featuredArtworksSubject.asObservable();\n    this.featuredArtists$ = this.featuredArtistsSubject.asObservable();\n    this.loading$ = this.loadingSubject.asObservable();\n    this.error$ = this.errorSubject.asObservable();\n  }\n  /**\n   * Load featured content for the home page\n   */\n  loadFeaturedContent() {\n    this.loadingSubject.next(true);\n    // Load featured artworks\n    this.httpClient.get('artwork', 'artworks').subscribe(artworks => {\n      // Get the most recent artworks (up to 6)\n      const featuredArtworks = artworks.sort((a, b) => b.creationYear - a.creationYear).slice(0, 6);\n      this.featuredArtworksSubject.next(featuredArtworks);\n      this.loadingSubject.next(false);\n    }, error => {\n      this.errorSubject.next('Failed to load featured artworks');\n      this.loadingSubject.next(false);\n    });\n    // Load featured artists\n    this.httpClient.get('artist', 'artists').subscribe(artists => {\n      // Get a random selection of artists (up to 4)\n      const featuredArtists = this.getRandomItems(artists, 4);\n      this.featuredArtistsSubject.next(featuredArtists);\n    }, error => {\n      this.errorSubject.next('Failed to load featured artists');\n    });\n  }\n  /**\n   * Get random items from an array\n   * @param items The array of items\n   * @param count The number of items to return\n   * @returns A random selection of items\n   */\n  getRandomItems(items, count) {\n    const shuffled = [...items].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n  static {\n    this.ɵfac = function HomeViewModel_Factory(t) {\n      return new (t || HomeViewModel)(i0.ɵɵinject(i1.HttpClientService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HomeViewModel,\n      factory: HomeViewModel.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","HomeViewModel","constructor","httpClient","featuredArtworksSubject","featuredArtistsSubject","loadingSubject","errorSubject","featuredArtworks$","asObservable","featuredArtists$","loading$","error$","loadFeaturedContent","next","get","subscribe","artworks","featuredArtworks","sort","a","b","creationYear","slice","error","artists","featuredArtists","getRandomItems","items","count","shuffled","Math","random","i0","ɵɵinject","i1","HttpClientService","factory","ɵfac","providedIn"],"sources":["C:\\fac\\an3_sem2\\ps\\proiect_ps - Copy (2)\\art-gallery-frontend\\src\\app\\view-models\\home.view-model.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ArtworkListItem } from '../models/artwork.model';\r\nimport { ArtistListItem } from '../models/artist.model';\r\nimport { HttpClientService } from '../core/http/http-client.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HomeViewModel {\r\n  private featuredArtworksSubject = new BehaviorSubject<ArtworkListItem[]>([]);\r\n  private featuredArtistsSubject = new BehaviorSubject<ArtistListItem[]>([]);\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  private errorSubject = new BehaviorSubject<string | null>(null);\r\n\r\n  public featuredArtworks$: Observable<ArtworkListItem[]> = this.featuredArtworksSubject.asObservable();\r\n  public featuredArtists$: Observable<ArtistListItem[]> = this.featuredArtistsSubject.asObservable();\r\n  public loading$: Observable<boolean> = this.loadingSubject.asObservable();\r\n  public error$: Observable<string | null> = this.errorSubject.asObservable();\r\n\r\n  constructor(\r\n    private httpClient: HttpClientService\r\n  ) { }\r\n\r\n  /**\r\n   * Load featured content for the home page\r\n   */\r\n  loadFeaturedContent(): void {\r\n    this.loadingSubject.next(true);\r\n\r\n    // Load featured artworks\r\n    this.httpClient.get<ArtworkListItem[]>('artwork', 'artworks')\r\n      .subscribe(\r\n        artworks => {\r\n          // Get the most recent artworks (up to 6)\r\n          const featuredArtworks = artworks\r\n            .sort((a, b) => b.creationYear - a.creationYear)\r\n            .slice(0, 6);\r\n          this.featuredArtworksSubject.next(featuredArtworks);\r\n          this.loadingSubject.next(false);\r\n        },\r\n        error => {\r\n          this.errorSubject.next('Failed to load featured artworks');\r\n          this.loadingSubject.next(false);\r\n        }\r\n      );\r\n\r\n    // Load featured artists\r\n    this.httpClient.get<ArtistListItem[]>('artist', 'artists')\r\n      .subscribe(\r\n        artists => {\r\n          // Get a random selection of artists (up to 4)\r\n          const featuredArtists = this.getRandomItems(artists, 4);\r\n          this.featuredArtistsSubject.next(featuredArtists);\r\n        },\r\n        error => {\r\n          this.errorSubject.next('Failed to load featured artists');\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get random items from an array\r\n   * @param items The array of items\r\n   * @param count The number of items to return\r\n   * @returns A random selection of items\r\n   */\r\n  private getRandomItems<T>(items: T[], count: number): T[] {\r\n    const shuffled = [...items].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, count);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;;AAQlD,OAAM,MAAOC,aAAa;EAWxBC,YACUC,UAA6B;IAA7B,KAAAA,UAAU,GAAVA,UAAU;IAXZ,KAAAC,uBAAuB,GAAG,IAAIJ,eAAe,CAAoB,EAAE,CAAC;IACpE,KAAAK,sBAAsB,GAAG,IAAIL,eAAe,CAAmB,EAAE,CAAC;IAClE,KAAAM,cAAc,GAAG,IAAIN,eAAe,CAAU,KAAK,CAAC;IACpD,KAAAO,YAAY,GAAG,IAAIP,eAAe,CAAgB,IAAI,CAAC;IAExD,KAAAQ,iBAAiB,GAAkC,IAAI,CAACJ,uBAAuB,CAACK,YAAY,EAAE;IAC9F,KAAAC,gBAAgB,GAAiC,IAAI,CAACL,sBAAsB,CAACI,YAAY,EAAE;IAC3F,KAAAE,QAAQ,GAAwB,IAAI,CAACL,cAAc,CAACG,YAAY,EAAE;IAClE,KAAAG,MAAM,GAA8B,IAAI,CAACL,YAAY,CAACE,YAAY,EAAE;EAIvE;EAEJ;;;EAGAI,mBAAmBA,CAAA;IACjB,IAAI,CAACP,cAAc,CAACQ,IAAI,CAAC,IAAI,CAAC;IAE9B;IACA,IAAI,CAACX,UAAU,CAACY,GAAG,CAAoB,SAAS,EAAE,UAAU,CAAC,CAC1DC,SAAS,CACRC,QAAQ,IAAG;MACT;MACA,MAAMC,gBAAgB,GAAGD,QAAQ,CAC9BE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,YAAY,GAAGF,CAAC,CAACE,YAAY,CAAC,CAC/CC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACd,IAAI,CAACnB,uBAAuB,CAACU,IAAI,CAACI,gBAAgB,CAAC;MACnD,IAAI,CAACZ,cAAc,CAACQ,IAAI,CAAC,KAAK,CAAC;IACjC,CAAC,EACDU,KAAK,IAAG;MACN,IAAI,CAACjB,YAAY,CAACO,IAAI,CAAC,kCAAkC,CAAC;MAC1D,IAAI,CAACR,cAAc,CAACQ,IAAI,CAAC,KAAK,CAAC;IACjC,CAAC,CACF;IAEH;IACA,IAAI,CAACX,UAAU,CAACY,GAAG,CAAmB,QAAQ,EAAE,SAAS,CAAC,CACvDC,SAAS,CACRS,OAAO,IAAG;MACR;MACA,MAAMC,eAAe,GAAG,IAAI,CAACC,cAAc,CAACF,OAAO,EAAE,CAAC,CAAC;MACvD,IAAI,CAACpB,sBAAsB,CAACS,IAAI,CAACY,eAAe,CAAC;IACnD,CAAC,EACDF,KAAK,IAAG;MACN,IAAI,CAACjB,YAAY,CAACO,IAAI,CAAC,iCAAiC,CAAC;IAC3D,CAAC,CACF;EACL;EAEA;;;;;;EAMQa,cAAcA,CAAIC,KAAU,EAAEC,KAAa;IACjD,MAAMC,QAAQ,GAAG,CAAC,GAAGF,KAAK,CAAC,CAACT,IAAI,CAAC,MAAM,GAAG,GAAGY,IAAI,CAACC,MAAM,EAAE,CAAC;IAC3D,OAAOF,QAAQ,CAACP,KAAK,CAAC,CAAC,EAAEM,KAAK,CAAC;EACjC;;;uBA7DW5B,aAAa,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,iBAAA;IAAA;EAAA;;;aAAbnC,aAAa;MAAAoC,OAAA,EAAbpC,aAAa,CAAAqC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}