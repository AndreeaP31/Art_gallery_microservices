{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { finalize, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/artwork.service\";\nimport * as i2 from \"../services/auth.service\";\nexport class ArtworkDetailsViewModel {\n  constructor(artworkService, authService) {\n    this.artworkService = artworkService;\n    this.authService = authService;\n    this.artworkSubject = new BehaviorSubject(null);\n    this.artwork$ = this.artworkSubject.asObservable();\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loading$ = this.loadingSubject.asObservable();\n    this.errorSubject = new BehaviorSubject(null);\n    this.error$ = this.errorSubject.asObservable();\n    // Check if user can edit artwork (employee, manager, admin)\n    this.canEdit$ = this.authService.isAuthenticated$.pipe(map(isAuthenticated => {\n      if (!isAuthenticated) return false;\n      return this.authService.isEmployee();\n    }));\n    // Check if user can sell artwork (employee, manager)\n    this.canSell$ = this.artwork$.pipe(map(artwork => {\n      if (!artwork || artwork.sold) return false;\n      return this.authService.isEmployee();\n    }));\n  }\n  loadArtwork(id) {\n    this.loadingSubject.next(true);\n    this.errorSubject.next(null);\n    this.artworkService.getArtworkById(id).pipe(finalize(() => this.loadingSubject.next(false))).subscribe(artwork => this.artworkSubject.next(artwork), error => this.errorSubject.next('Failed to load artwork details. Please try again later.'));\n  }\n  sellArtwork() {\n    const artwork = this.artworkSubject.value;\n    if (!artwork) return;\n    this.loadingSubject.next(true);\n    this.errorSubject.next(null);\n    this.artworkService.sellArtwork(artwork.id).pipe(finalize(() => this.loadingSubject.next(false))).subscribe(updatedArtwork => this.artworkSubject.next(updatedArtwork), error => this.errorSubject.next('Failed to sell artwork. Please try again later.'));\n  }\n  static {\n    this.ɵfac = function ArtworkDetailsViewModel_Factory(t) {\n      return new (t || ArtworkDetailsViewModel)(i0.ɵɵinject(i1.ArtworkService), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ArtworkDetailsViewModel,\n      factory: ArtworkDetailsViewModel.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","finalize","map","ArtworkDetailsViewModel","constructor","artworkService","authService","artworkSubject","artwork$","asObservable","loadingSubject","loading$","errorSubject","error$","canEdit$","isAuthenticated$","pipe","isAuthenticated","isEmployee","canSell$","artwork","sold","loadArtwork","id","next","getArtworkById","subscribe","error","sellArtwork","value","updatedArtwork","i0","ɵɵinject","i1","ArtworkService","i2","AuthService","factory","ɵfac"],"sources":["C:\\fac\\an3_sem2\\ps\\proiect_ps - Copy (2)\\art-gallery-frontend\\src\\app\\view-models\\artwork-details.view-model.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { finalize, map } from 'rxjs/operators';\r\nimport { ArtworkService } from '../services/artwork.service';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Artwork } from '../models/artwork.model';\r\n\r\n@Injectable()\r\nexport class ArtworkDetailsViewModel {\r\n  private artworkSubject = new BehaviorSubject<Artwork | null>(null);\r\n  public artwork$ = this.artworkSubject.asObservable();\r\n  \r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  public loading$ = this.loadingSubject.asObservable();\r\n  \r\n  private errorSubject = new BehaviorSubject<string | null>(null);\r\n  public error$ = this.errorSubject.asObservable();\r\n  \r\n  // Computed observables\r\n  public canEdit$: Observable<boolean>;\r\n  public canSell$: Observable<boolean>;\r\n  \r\n  constructor(\r\n    private artworkService: ArtworkService,\r\n    private authService: AuthService\r\n  ) {\r\n    // Check if user can edit artwork (employee, manager, admin)\r\n    this.canEdit$ = this.authService.isAuthenticated$\r\n      .pipe(\r\n        map(isAuthenticated => {\r\n          if (!isAuthenticated) return false;\r\n          return this.authService.isEmployee();\r\n        })\r\n      );\r\n    \r\n    // Check if user can sell artwork (employee, manager)\r\n    this.canSell$ = this.artwork$\r\n      .pipe(\r\n        map(artwork => {\r\n          if (!artwork || artwork.sold) return false;\r\n          return this.authService.isEmployee();\r\n        })\r\n      );\r\n  }\r\n\r\n  loadArtwork(id: number): void {\r\n    this.loadingSubject.next(true);\r\n    this.errorSubject.next(null);\r\n    \r\n    this.artworkService.getArtworkById(id)\r\n      .pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      )\r\n      .subscribe(\r\n        artwork => this.artworkSubject.next(artwork),\r\n        error => this.errorSubject.next('Failed to load artwork details. Please try again later.')\r\n      );\r\n  }\r\n\r\n  sellArtwork(): void {\r\n    const artwork = this.artworkSubject.value;\r\n    if (!artwork) return;\r\n    \r\n    this.loadingSubject.next(true);\r\n    this.errorSubject.next(null);\r\n    \r\n    this.artworkService.sellArtwork(artwork.id)\r\n      .pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      )\r\n      .subscribe(\r\n        updatedArtwork => this.artworkSubject.next(updatedArtwork),\r\n        error => this.errorSubject.next('Failed to sell artwork. Please try again later.')\r\n      );\r\n  }\r\n}"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAM9C,OAAM,MAAOC,uBAAuB;EAclCC,YACUC,cAA8B,EAC9BC,WAAwB;IADxB,KAAAD,cAAc,GAAdA,cAAc;IACd,KAAAC,WAAW,GAAXA,WAAW;IAfb,KAAAC,cAAc,GAAG,IAAIP,eAAe,CAAiB,IAAI,CAAC;IAC3D,KAAAQ,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;IAE5C,KAAAC,cAAc,GAAG,IAAIV,eAAe,CAAU,KAAK,CAAC;IACrD,KAAAW,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACD,YAAY,EAAE;IAE5C,KAAAG,YAAY,GAAG,IAAIZ,eAAe,CAAgB,IAAI,CAAC;IACxD,KAAAa,MAAM,GAAG,IAAI,CAACD,YAAY,CAACH,YAAY,EAAE;IAU9C;IACA,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACR,WAAW,CAACS,gBAAgB,CAC9CC,IAAI,CACHd,GAAG,CAACe,eAAe,IAAG;MACpB,IAAI,CAACA,eAAe,EAAE,OAAO,KAAK;MAClC,OAAO,IAAI,CAACX,WAAW,CAACY,UAAU,EAAE;IACtC,CAAC,CAAC,CACH;IAEH;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACX,QAAQ,CAC1BQ,IAAI,CACHd,GAAG,CAACkB,OAAO,IAAG;MACZ,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,OAAO,KAAK;MAC1C,OAAO,IAAI,CAACf,WAAW,CAACY,UAAU,EAAE;IACtC,CAAC,CAAC,CACH;EACL;EAEAI,WAAWA,CAACC,EAAU;IACpB,IAAI,CAACb,cAAc,CAACc,IAAI,CAAC,IAAI,CAAC;IAC9B,IAAI,CAACZ,YAAY,CAACY,IAAI,CAAC,IAAI,CAAC;IAE5B,IAAI,CAACnB,cAAc,CAACoB,cAAc,CAACF,EAAE,CAAC,CACnCP,IAAI,CACHf,QAAQ,CAAC,MAAM,IAAI,CAACS,cAAc,CAACc,IAAI,CAAC,KAAK,CAAC,CAAC,CAChD,CACAE,SAAS,CACRN,OAAO,IAAI,IAAI,CAACb,cAAc,CAACiB,IAAI,CAACJ,OAAO,CAAC,EAC5CO,KAAK,IAAI,IAAI,CAACf,YAAY,CAACY,IAAI,CAAC,yDAAyD,CAAC,CAC3F;EACL;EAEAI,WAAWA,CAAA;IACT,MAAMR,OAAO,GAAG,IAAI,CAACb,cAAc,CAACsB,KAAK;IACzC,IAAI,CAACT,OAAO,EAAE;IAEd,IAAI,CAACV,cAAc,CAACc,IAAI,CAAC,IAAI,CAAC;IAC9B,IAAI,CAACZ,YAAY,CAACY,IAAI,CAAC,IAAI,CAAC;IAE5B,IAAI,CAACnB,cAAc,CAACuB,WAAW,CAACR,OAAO,CAACG,EAAE,CAAC,CACxCP,IAAI,CACHf,QAAQ,CAAC,MAAM,IAAI,CAACS,cAAc,CAACc,IAAI,CAAC,KAAK,CAAC,CAAC,CAChD,CACAE,SAAS,CACRI,cAAc,IAAI,IAAI,CAACvB,cAAc,CAACiB,IAAI,CAACM,cAAc,CAAC,EAC1DH,KAAK,IAAI,IAAI,CAACf,YAAY,CAACY,IAAI,CAAC,iDAAiD,CAAC,CACnF;EACL;;;uBAlEWrB,uBAAuB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAvBjC,uBAAuB;MAAAkC,OAAA,EAAvBlC,uBAAuB,CAAAmC;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}