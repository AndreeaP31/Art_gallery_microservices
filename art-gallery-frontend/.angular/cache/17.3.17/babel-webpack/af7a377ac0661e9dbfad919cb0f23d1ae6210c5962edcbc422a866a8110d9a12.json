{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../core/http/http-client.service\";\nexport class ArtistDetailsViewModel {\n  constructor(route, httpClient) {\n    this.route = route;\n    this.httpClient = httpClient;\n    this.artistSubject = new BehaviorSubject(null);\n    this.artist$ = this.artistSubject.asObservable();\n    this.artworksSubject = new BehaviorSubject([]);\n    this.artworks$ = this.artworksSubject.asObservable();\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loading$ = this.loadingSubject.asObservable();\n    this.errorSubject = new BehaviorSubject(null);\n    this.error$ = this.errorSubject.asObservable();\n    // Check if user can edit artist (employee, manager, admin)\n    // This would normally check with the auth service, but for now we'll simplify\n    // and just return false (no editing allowed)\n    this.canEdit$ = of(false);\n  }\n  loadArtist(id) {\n    this.loadingSubject.next(true);\n    this.errorSubject.next(null);\n    // Load artist details\n    this.httpClient.get('artist', `artists/${id}`).pipe(finalize(() => this.loadingSubject.next(false))).subscribe(artist => {\n      this.artistSubject.next(artist);\n      this.loadArtistArtworks(id);\n    }, error => this.errorSubject.next('Failed to load artist details. Please try again later.'));\n  }\n  loadArtistArtworks(artistId) {\n    this.loadingSubject.next(true);\n    this.httpClient.get('artwork', `artworks/artist/${artistId}`).pipe(finalize(() => this.loadingSubject.next(false))).subscribe(artworks => this.artworksSubject.next(artworks), error => this.errorSubject.next('Failed to load artist artworks. Please try again later.'));\n  }\n  static {\n    this.ɵfac = function ArtistDetailsViewModel_Factory(t) {\n      return new (t || ArtistDetailsViewModel)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i2.HttpClientService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ArtistDetailsViewModel,\n      factory: ArtistDetailsViewModel.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","finalize","ArtistDetailsViewModel","constructor","route","httpClient","artistSubject","artist$","asObservable","artworksSubject","artworks$","loadingSubject","loading$","errorSubject","error$","canEdit$","loadArtist","id","next","get","pipe","subscribe","artist","loadArtistArtworks","error","artistId","artworks","i0","ɵɵinject","i1","ActivatedRoute","i2","HttpClientService","factory","ɵfac"],"sources":["C:\\fac\\an3_sem2\\ps\\proiect_ps - Copy (2)\\art-gallery-frontend\\src\\app\\view-models\\artist-details.view-model.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, combineLatest, of } from 'rxjs';\r\nimport { finalize, switchMap } from 'rxjs/operators';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Artist } from '../models/artist.model';\r\nimport { ArtworkListItem } from '../models/artwork.model';\r\nimport { HttpClientService } from '../core/http/http-client.service';\r\n\r\n@Injectable()\r\nexport class ArtistDetailsViewModel {\r\n  private artistSubject = new BehaviorSubject<Artist | null>(null);\r\n  public artist$ = this.artistSubject.asObservable();\r\n\r\n  private artworksSubject = new BehaviorSubject<ArtworkListItem[]>([]);\r\n  public artworks$ = this.artworksSubject.asObservable();\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  public loading$ = this.loadingSubject.asObservable();\r\n\r\n  private errorSubject = new BehaviorSubject<string | null>(null);\r\n  public error$ = this.errorSubject.asObservable();\r\n\r\n  // Computed observables\r\n  public canEdit$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private httpClient: HttpClientService\r\n  ) {\r\n    // Check if user can edit artist (employee, manager, admin)\r\n    // This would normally check with the auth service, but for now we'll simplify\r\n    // and just return false (no editing allowed)\r\n    this.canEdit$ = of(false);\r\n  }\r\n\r\n  loadArtist(id: number): void {\r\n    this.loadingSubject.next(true);\r\n    this.errorSubject.next(null);\r\n\r\n    // Load artist details\r\n    this.httpClient.get<Artist>('artist', `artists/${id}`)\r\n      .pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      )\r\n      .subscribe(\r\n        artist => {\r\n          this.artistSubject.next(artist);\r\n          this.loadArtistArtworks(id);\r\n        },\r\n        error => this.errorSubject.next('Failed to load artist details. Please try again later.')\r\n      );\r\n  }\r\n\r\n  private loadArtistArtworks(artistId: number): void {\r\n    this.loadingSubject.next(true);\r\n\r\n    this.httpClient.get<ArtworkListItem[]>('artwork', `artworks/artist/${artistId}`)\r\n      .pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      )\r\n      .subscribe(\r\n        artworks => this.artworksSubject.next(artworks),\r\n        error => this.errorSubject.next('Failed to load artist artworks. Please try again later.')\r\n      );\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,EAA6BC,EAAE,QAAQ,MAAM;AACrE,SAASC,QAAQ,QAAmB,gBAAgB;;;;AAOpD,OAAM,MAAOC,sBAAsB;EAgBjCC,YACUC,KAAqB,EACrBC,UAA6B;IAD7B,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,UAAU,GAAVA,UAAU;IAjBZ,KAAAC,aAAa,GAAG,IAAIP,eAAe,CAAgB,IAAI,CAAC;IACzD,KAAAQ,OAAO,GAAG,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE;IAE1C,KAAAC,eAAe,GAAG,IAAIV,eAAe,CAAoB,EAAE,CAAC;IAC7D,KAAAW,SAAS,GAAG,IAAI,CAACD,eAAe,CAACD,YAAY,EAAE;IAE9C,KAAAG,cAAc,GAAG,IAAIZ,eAAe,CAAU,KAAK,CAAC;IACrD,KAAAa,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACH,YAAY,EAAE;IAE5C,KAAAK,YAAY,GAAG,IAAId,eAAe,CAAgB,IAAI,CAAC;IACxD,KAAAe,MAAM,GAAG,IAAI,CAACD,YAAY,CAACL,YAAY,EAAE;IAS9C;IACA;IACA;IACA,IAAI,CAACO,QAAQ,GAAGf,EAAE,CAAC,KAAK,CAAC;EAC3B;EAEAgB,UAAUA,CAACC,EAAU;IACnB,IAAI,CAACN,cAAc,CAACO,IAAI,CAAC,IAAI,CAAC;IAC9B,IAAI,CAACL,YAAY,CAACK,IAAI,CAAC,IAAI,CAAC;IAE5B;IACA,IAAI,CAACb,UAAU,CAACc,GAAG,CAAS,QAAQ,EAAE,WAAWF,EAAE,EAAE,CAAC,CACnDG,IAAI,CACHnB,QAAQ,CAAC,MAAM,IAAI,CAACU,cAAc,CAACO,IAAI,CAAC,KAAK,CAAC,CAAC,CAChD,CACAG,SAAS,CACRC,MAAM,IAAG;MACP,IAAI,CAAChB,aAAa,CAACY,IAAI,CAACI,MAAM,CAAC;MAC/B,IAAI,CAACC,kBAAkB,CAACN,EAAE,CAAC;IAC7B,CAAC,EACDO,KAAK,IAAI,IAAI,CAACX,YAAY,CAACK,IAAI,CAAC,wDAAwD,CAAC,CAC1F;EACL;EAEQK,kBAAkBA,CAACE,QAAgB;IACzC,IAAI,CAACd,cAAc,CAACO,IAAI,CAAC,IAAI,CAAC;IAE9B,IAAI,CAACb,UAAU,CAACc,GAAG,CAAoB,SAAS,EAAE,mBAAmBM,QAAQ,EAAE,CAAC,CAC7EL,IAAI,CACHnB,QAAQ,CAAC,MAAM,IAAI,CAACU,cAAc,CAACO,IAAI,CAAC,KAAK,CAAC,CAAC,CAChD,CACAG,SAAS,CACRK,QAAQ,IAAI,IAAI,CAACjB,eAAe,CAACS,IAAI,CAACQ,QAAQ,CAAC,EAC/CF,KAAK,IAAI,IAAI,CAACX,YAAY,CAACK,IAAI,CAAC,yDAAyD,CAAC,CAC3F;EACL;;;uBAvDWhB,sBAAsB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;IAAA;EAAA;;;aAAtB9B,sBAAsB;MAAA+B,OAAA,EAAtB/B,sBAAsB,CAAAgC;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}