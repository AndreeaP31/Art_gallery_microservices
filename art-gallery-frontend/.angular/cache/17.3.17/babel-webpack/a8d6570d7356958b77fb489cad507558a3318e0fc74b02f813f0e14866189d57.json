{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nexport class AppViewModel {\n  constructor(translate) {\n    this.translate = translate;\n    this.titleSubject = new BehaviorSubject('Art Gallery');\n    this.title$ = this.titleSubject.asObservable();\n    // Set default language\n    translate.setDefaultLang('en');\n    // Use browser language if available, otherwise use English\n    const browserLang = translate.getBrowserLang();\n    translate.use(browserLang?.match(/en|fr|es/) ? browserLang : 'en');\n  }\n  /**\n   * Switch the application language\n   * @param language The language code to switch to\n   */\n  switchLanguage(language) {\n    this.translate.use(language);\n  }\n  /**\n   * Set the application title\n   * @param title The new title\n   */\n  setTitle(title) {\n    this.titleSubject.next(title);\n  }\n  static {\n    this.ɵfac = function AppViewModel_Factory(t) {\n      return new (t || AppViewModel)(i0.ɵɵinject(i1.TranslateService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppViewModel,\n      factory: AppViewModel.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","AppViewModel","constructor","translate","titleSubject","title$","asObservable","setDefaultLang","browserLang","getBrowserLang","use","match","switchLanguage","language","setTitle","title","next","i0","ɵɵinject","i1","TranslateService","factory","ɵfac","providedIn"],"sources":["C:\\fac\\an3_sem2\\ps\\proiect_ps - Copy (2)\\art-gallery-frontend\\src\\app\\view-models\\app.view-model.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppViewModel {\r\n  private titleSubject = new BehaviorSubject<string>('Art Gallery');\r\n  public title$: Observable<string> = this.titleSubject.asObservable();\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // Set default language\r\n    translate.setDefaultLang('en');\r\n    \r\n    // Use browser language if available, otherwise use English\r\n    const browserLang = translate.getBrowserLang();\r\n    translate.use(browserLang?.match(/en|fr|es/) ? browserLang : 'en');\r\n  }\r\n\r\n  /**\r\n   * Switch the application language\r\n   * @param language The language code to switch to\r\n   */\r\n  switchLanguage(language: string): void {\r\n    this.translate.use(language);\r\n  }\r\n\r\n  /**\r\n   * Set the application title\r\n   * @param title The new title\r\n   */\r\n  setTitle(title: string): void {\r\n    this.titleSubject.next(title);\r\n  }\r\n}"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;AAKlD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,SAA2B;IAA3B,KAAAA,SAAS,GAATA,SAAS;IAHrB,KAAAC,YAAY,GAAG,IAAIJ,eAAe,CAAS,aAAa,CAAC;IAC1D,KAAAK,MAAM,GAAuB,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE;IAGlE;IACAH,SAAS,CAACI,cAAc,CAAC,IAAI,CAAC;IAE9B;IACA,MAAMC,WAAW,GAAGL,SAAS,CAACM,cAAc,EAAE;IAC9CN,SAAS,CAACO,GAAG,CAACF,WAAW,EAAEG,KAAK,CAAC,UAAU,CAAC,GAAGH,WAAW,GAAG,IAAI,CAAC;EACpE;EAEA;;;;EAIAI,cAAcA,CAACC,QAAgB;IAC7B,IAAI,CAACV,SAAS,CAACO,GAAG,CAACG,QAAQ,CAAC;EAC9B;EAEA;;;;EAIAC,QAAQA,CAACC,KAAa;IACpB,IAAI,CAACX,YAAY,CAACY,IAAI,CAACD,KAAK,CAAC;EAC/B;;;uBA3BWd,YAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;IAAA;EAAA;;;aAAZnB,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}